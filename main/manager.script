local INK = require "ink.story"
local BRIDGE = require "main.bridge" 

function string:split(sep)
	if sep == nil then
		sep = '%s'
	end 

	local res = {}
	local func = function(w)
		table.insert(res, w)
	end 

	string.gsub(self, '[^'..sep..']+', func)
	return res 
end

local function process(tags)
	if tags then
		for _, tag in ipairs(tags) do
			local data = tag:split()
			local cmd = table.remove(data, 1)
			if BRIDGE.action[cmd] then
				BRIDGE.action[cmd](unpack(data))
			else
				pprint("No command '" .. cmd .. "' is defined.")
			end
		end
	end
end

local function add_button_settings(button, tags)
	if tags then
		for _, tag in ipairs(tags) do
			local data = tag:split()
			button[string.lower(data[1])] = data[2]
		end
	end
end

local function display(text)
	local data = text:split(":")
	local cmd = table.remove(data, 1)
	if BRIDGE.action[cmd] then
		BRIDGE.action[cmd](table.concat(data, ":"))
		return
	end

	BRIDGE.restore_text_prompt()

	local action = {text = text, speed = 0.001, limit = 1500}
	if #data > 0 then
		action.text = table.concat(data, ":")
		action.speaker = cmd
	end
	
	msg.post("#gui", "text", action)
end

local function process_story(self, paragraphs, choices)
	self.co_progress = coroutine.create(function ()
		
		for _, paragraph in ipairs(paragraphs) do
			process(paragraph.tags)
			if #paragraph.text > 0 then
				display(paragraph.text)	
				coroutine.yield()
			end
		end

		if #choices == 0 then --end of story
			msg.post(".", "story_end")
		else
			local select = {}
			for i, choice in ipairs (choices) do
				
				local is_button = true
				for _, pattern in ipairs(self.patterns) do
					if string.find(choice.text, pattern) ~= nil then
						msg.post(BRIDGE.url, "choice", {text = choice.text, action = i})
						is_button = false
						break
					end
				end
				if is_button then
					local button = {text = choice.text, action = i}
					add_button_settings(button, choice.tags)
					table.insert(select, button)
				end
			end
			BRIDGE.restore_text_prompt()
			msg.post("#gui", "clear", {clear = "all"})
			msg.post("#gui", "select", {select = select})
			self.co_progress = nil
		end
		
	end)
	
	coroutine.resume(self.co_progress) 

end

local function restart(self)
	local res = sys.load_resource("/assets/story.json")
	self.story = INK.create(res)
	
	self.story.bind("save", function (slot)
		local filename = sys.get_save_file(sys.get_config("project.title"), slot)
		sys.save(filename, {state = self.story.get_state(), actions = BRIDGE.stack})
	end)
	
	self.story.bind("load", function (slot)
		msg.post(".", "release_input_focus")
		local filename = sys.get_save_file(sys.get_config("project.title"), slot)
		local data = sys.load(filename)
		if not data.state then
			timer.delay(0.6, false, function()
				msg.post("/hud", "fade_in")
				msg.post(".", "acquire_input_focus")
			end)
			return
		end
		--self.story = INK.create(res)
		
		local paragraphs, choices = self.story.restore(data.state)
		
		for i = #paragraphs, 1, -1 do
			local p = paragraphs[i]
			if p.tags then
				for _, tag in ipairs(p.tags) do
					if tag == "SKIP_ON_RESTORE" then
						table.remove(paragraphs, i)
						break
					end
				end
			end
		end
			
		timer.delay(.6, false, function()
			self.co_progress = coroutine.create(function ()
				BRIDGE.restore(data.actions)
				msg.post(".", "acquire_input_focus")
				msg.post("#gui", "clear", {clear = "all"})
				msg.post("/hud", "fade_in")
				timer.delay(0.1, false, function() -- need some time to register patterns
					process_story(self, paragraphs, choices)
				end)
			end)
			coroutine.resume(self.co_progress)
		end)
	end)
	
	local paragraphs, choices = self.story.continue()
	process_story(self, paragraphs, choices)
end

function init(self)
	self.patterns = {}
	msg.post("@render:", "use_fixed_fit_projection")
	msg.post(".", "acquire_input_focus")
	msg.post("/scenes", "acquire_input_focus")
	restart(self)
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed and self.co_progress then
		coroutine.resume(self.co_progress) 
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")
		if self.co_progress then
			coroutine.resume(self.co_progress) 
		end
		
	elseif message_id == hash("action") then
		local paragraphs, choices = self.story.continue(message.action)
		msg.post("#gui", "clear", {clear = "all"})
		msg.post(BRIDGE.url, "action", {action = message.action})
		process_story(self, paragraphs, choices)

	elseif message_id == hash("register_choice_pattern") then
		table.insert(self.patterns, message.pattern)

	elseif message_id == hash("story_end") then
		restart(self)
	end
end


