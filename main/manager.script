local INK = require "ink.story"
local BRIDGE = require "main.bridge" 
local STATE = require "state" 

local PATH_TO_RESTORE = "demo"
--local on_load = {{text = "", tags = {"SCENE map"}}}

function string:split(sep)
	if sep == nil then
		sep = '%s'
	end 

	local res = {}
	local func = function(w)
		table.insert(res, w)
	end 

	string.gsub(self, '[^'..sep..']+', func)
	return res 
end

local function process(tags)
	if tags then
		for _, tag in ipairs(tags) do
			tag = tag:gsub(", ", ",")
			local data = tag:split()
			local cmd = table.remove(data, 1)

			if BRIDGE.action[cmd] then
				BRIDGE.action[cmd](unpack(data))
			else
				pprint("No command '" .. cmd .. "' is defined.")
			end
		end
	end
end

local function add_button_settings(button, tags)
	if tags then
		for _, tag in ipairs(tags) do
			local data = tag:split()
			button[string.lower(data[1])] = data[2]
		end
	end
end

local function display(text)
	local data = text:split(":")
	local cmd = table.remove(data, 1)
	if BRIDGE.action[cmd] then
		BRIDGE.action[cmd](table.concat(data, ":"))
		return
	end

	BRIDGE.restore_text_prompt()

	local action = {text = text, speed = 0.001, limit = 1500}
	if #data > 0 then
		action.text = table.concat(data, ":")
		action.speaker = cmd
	end
	
	msg.post("/hud#gui", "text", action)
end

local function process_story(self, paragraphs, choices)
	self.co_progress = coroutine.create(function ()
		
		for _, paragraph in ipairs(paragraphs) do
			process(paragraph.tags)
			if #paragraph.text > 0 then
				display(paragraph.text)	
				coroutine.yield()
			end
		end

		if #choices == 0 then --end of story
			msg.post(".", "restart")
		else
			local select = {}
			for i, choice in ipairs (choices) do
				
				local is_button = true
				for _, pattern in ipairs(self.patterns) do
					if string.find(choice.text, pattern) ~= nil then
						msg.post(BRIDGE.url, "choice", {text = choice.text, action = i})
						is_button = false
						break
					end
				end
				if is_button then
					local button = {text = choice.text, action = i}
					add_button_settings(button, choice.tags)
					table.insert(select, button)
				end
			end
			BRIDGE.restore_text_prompt()
			msg.post("/hud#gui", "clear", {clear = "all"})
			msg.post("/hud#gui", "select", {select = select, speed = 0.5, delay = 0.1})
			self.co_progress = nil
		end
		
	end)
	
	coroutine.resume(self.co_progress) 

end

local function save(slot)
	local filename = sys.get_save_file(sys.get_config("project.title"), slot)
	sys.save(filename, {state = STATE._STORY.get_state(), actions = BRIDGE.stack})
end

local function serialize(slot)
	local filename = sys.get_save_file(sys.get_config("project.title"), slot)
	
	sys.save(filename, {
		state = STATE._STORY.serialize(), 
		actions = BRIDGE.stack
	})

end

local function deserialize(self, slot)
	msg.post(".", "release_input_focus")
	local filename = sys.get_save_file(sys.get_config("project.title"), slot)
	local data = sys.load(filename)
	if not data.state then
		pprint("no data")
		msg.post(".", "acquire_input_focus")
		msg.post("/hud", "acquire_input_focus")
		coroutine.resume(self.co_progress)
		return
	end

	local paragraphs, choices = self.story.deserialize(data.state, PATH_TO_RESTORE)
	
	for key, value in pairs(STATE.init) do
		self.story.variables[key] = value
	end

	for i = #paragraphs, 1, -1 do
		local p = paragraphs[i]
		if p.tags then
			for _, tag in ipairs(p.tags) do
				if tag == "SKIP_ON_RESTORE" then
					table.remove(paragraphs, i)
					break
				end
			end
		end
	end

	self.co_progress = coroutine.create(function ()
		BRIDGE.restore(data.actions)
		msg.post(".", "acquire_input_focus")
		msg.post("/hud#gui", "clear", {clear = "all"})
		msg.post("/hud", "fade_in")
		msg.post("/hud", "acquire_input_focus")
		--timer.delay(0.1, false, function() -- need some time to register patterns
		process_story(self, paragraphs, choices) 
		--end)
	end)
	coroutine.resume(self.co_progress)

end

local function load(self, slot)
	msg.post(".", "release_input_focus")
	local filename = sys.get_save_file(sys.get_config("project.title"), slot)
	local data = sys.load(filename)
	if not data.state then
		msg.post(".", "acquire_input_focus")
		coroutine.resume(self.co_progress)
		return
	end
	
	local paragraphs, choices = self.story.restore(data.state)
	for key, value in pairs(STATE.init) do
		self.story.variables[key] = value
	end

	for i = #paragraphs, 1, -1 do
		local p = paragraphs[i]
		if p.tags then
			for _, tag in ipairs(p.tags) do
				if tag == "SKIP_ON_RESTORE" then
					table.remove(paragraphs, i)
					break
				end
			end
		end
	end

		self.co_progress = coroutine.create(function ()
			BRIDGE.restore(data.actions)
			msg.post(".", "acquire_input_focus")
			msg.post("/hud#gui", "clear", {clear = "all"})
			msg.post("/hud", "fade_in")
			--timer.delay(0.1, false, function() -- need some time to register patterns
			process_story(self, on_load or paragraphs, choices) 
			--end)
		end)
		coroutine.resume(self.co_progress)

end

local function restart(self)
	local res = sys.load_resource("/assets/story.json")
	self.story = INK.create(res)

	for key, value in pairs(STATE.init) do
		self.story.variables[key] = value
	end
	STATE._STORY = self.story
	
	self.story.bind("save", save)
	self.story.bind("load", function(slot) load(self, slot) end)
	
	local paragraphs, choices = self.story.continue()
	process_story(self, paragraphs, choices)
end

function init(self)
	self.patterns = {}
	msg.post("@render:", "use_fixed_fit_projection")
	msg.post(".", "acquire_input_focus")
	msg.post("/scenes", "acquire_input_focus")

	msg.post("/hud", "acquire_input_focus")

	restart(self)
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed and self.co_progress and BRIDGE.ready then
		coroutine.resume(self.co_progress) 
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")

		if self.co_progress then
			coroutine.resume(self.co_progress) 
		end
		
	elseif message_id == hash("action") then
		local paragraphs, choices = self.story.continue(message.action)

		msg.post("/hud#gui", "clear", {clear = "all"})
		msg.post(BRIDGE.url, "action", {action = message.action})
		process_story(self, paragraphs, choices)


	elseif message_id == hash("register_choice_pattern") then
		table.insert(self.patterns, message.pattern)

	elseif message_id == hash("restart") then
		restart(self)

	elseif message_id == hash("save") then
		--save(message.slot)
		serialize(message.slot)

	elseif message_id == hash("load") then
		deserialize(self, message.slot)
	end
end


